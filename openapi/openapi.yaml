openapi: 3.0.3
info:
  title: Freezino API
  description: API for the Freezino project
  version: "1.0.0"
servers:
  - url: http://64.227.168.9:8080/api/v1
    description: Dev server
paths:
  /auth/register:
    post:
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Validation error (bad email or password)

  /auth/login:
    post:
      summary: User login attempt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          headers:
            Authorization:
              schema:
                type: string
                example: "Bearer {token}"
              description: JWT token for authentication
        '401':
          description: Invalid email or password
        '429':
          description: Too many requests

  /auth/password-recovery:
    post:
      summary: Password recovery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecoveryRequest'
      responses:
        '200':
          description: Password recovery link sent on email (if email exists
        '429':
          description: Too many requests

  /auth/password-reset:
    post:
      summary: Complete password reset process (user gets a link on email with token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password successfully changed
        '400':
          description: Validation error or expired token
        '404':
          description: User not found

  /roulette/info:
    get:
      summary: Get information about combinations and payouts
      responses:
        '200':
          description: Successfully retrieved information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouletteInfoResponse'

  /roulette/bet:
    post:
      summary: Place a roulette bet
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouletteBetRequest'
      responses:
        '200':
          description: Bet result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouletteBetResponse'
        '409':
          description: Outdated rules version

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        passwordHash:
          type: string
          example: hashpassword
      required:
        - email
        - passwordHash

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        passwordHash:
          type: string
          example: hashpassword
      required:
        - email
        - passwordHash

    PasswordRecoveryRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
      required:
        - email

    PasswordResetRequest:
      type: object
      properties:
        token:
          type: string
          example: reset_token
        newPasswordHash:
          type: string
          example: newhashpassword
      required:
        - token
        - newPasswordHash

    RouletteInfoResponse:
      type: object
      properties:
        version:
          type: string
          example: "1.0"
        combinations:
          type: array
          items:
            type: object
            properties:
              combination:
                type: string
                example: "Triple 7"
              payout:
                type: integer
                example: 100
        maxBet:
          type: integer
          example: 1000
        minBet:
          type: integer
          example: 10

    RouletteBetRequest:
      type: object
      properties:
        userId:
          type: string
          example: user123
        amount:
          type: integer
          example: 100
        rulesVersion:
          type: string
          example: "1.0"
      required:
        - userId
        - amount
        - rulesVersion

    RouletteBetResponse:
      type: object
      properties:
        result:
          type: string
          example: "Lose"
        winAmount:
          type: integer
          example: 0
        message:
          type: string
          example: "Better luck next time!"
